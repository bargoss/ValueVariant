<#@ template language="C#" hostspecific="false" linePragmas="false" #>
<#@ output extension=".tt.cs" encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../Const.t4" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY ValueVariant.tt. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable

using System.Runtime.CompilerServices;

namespace System.ValueVariant.Details;

public static class ValueVariant
{
<# for (var i = 1; i <= MaxTypeParam; ++i) { #>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ref readonly TValue GetValue<#= i #><TUnion, TValue>(in TUnion value, byte index) where TUnion: unmanaged where TValue: unmanaged
		=> ref index == <#= i #> ? ref Unsafe.As<TUnion, TValue>(value) : ref Throw.InvalidOperationExceptionRef<TValue>();

<# } #>
}
