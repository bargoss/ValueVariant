<#@ template language="C#" hostspecific="false" linePragmas="false" #>
<#@ output extension=".tt.cs" encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../Const.t4" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY IValueVariantT.tt. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable

namespace System.ValueVariant.Details;
<# for (var i = 1; i <= MaxTypeParam; ++i) { #>

public interface IValueVariant<<#= Join(1, i, e => $"T{e}") #>>:
	<#= Join(1, i, e => $"IValueVariantIndex{e}<T{e}>") #>
	<#= string.Join(" ", Range(1, i, e => $"where T{e}: unmanaged")) #>
{
	void AcceptActionVisitor<TV>(in TV visitor) where TV: <#= Join(1, i, e => $"IValueVariantActionVisitor<T{e}>") #>;

	void AcceptActionVisitor<TV, TA1>(in TV visitor, TA1 arg1) where TV: <#= Join(1, i, e => $"IValueVariantActionVisitor<T{e}, TA1>") #>;

	void AcceptFuncVisitor<TV, TR>(in TV visitor, out TR result) where TV: <#= Join(1, i, e => $"IValueVariantFuncVisitor<T{e}, TR>") #>;

	void AcceptFuncVisitor<TV, TA1, TR>(in TV visitor, TA1 arg1, out TR result) where TV: <#= Join(1, i, e => $"IValueVariantFuncVisitor<T{e}, TA1, TR>") #>;
}
<# } #>
